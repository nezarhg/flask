from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from ..models import db, ActivityLog, User
import datetime
import json
import requests
import os
import re

ai_assistant_bp = Blueprint('ai_assistant', __name__)

# إعدادات مساعد الذكاء الاصطناعي
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', 'your_openai_api_key')
OPENAI_API_URL = "https://api.openai.com/v1/chat/completions"

# قاعدة معرفة المساعد
ASSISTANT_KNOWLEDGE = {
    "general": [
        "مرحبًا بك في نظام إدارة علاقات العملاء (CRM) الخاص بالمنشآت العقارية.",
        "يمكنني مساعدتك في استخدام النظام وتوجيهك خلال مختلف الميزات والوظائف.",
        "يمكنك سؤالي عن كيفية إضافة منشأة جديدة، أو إدارة الحملات التسويقية، أو عرض الإحصائيات، أو أي استفسار آخر."
    ],
    "establishments": [
        "يمكنك إضافة منشأة جديدة من خلال الضغط على زر 'إضافة منشأة' في صفحة المنشآت.",
        "يمكنك البحث عن المنشآت باستخدام اسم المنشأة أو الرقم الموحد أو المنطقة أو المدينة.",
        "يمكنك تصدير بيانات المنشآت بتنسيق Excel أو CSV من خلال زر 'تصدير' في صفحة المنشآت.",
        "يمكنك تحرير بيانات المنشأة بالضغط على أيقونة التعديل بجانب المنشأة في قائمة المنشآت."
    ],
    "marketing": [
        "يمكنك إنشاء حملة تسويقية جديدة من خلال الضغط على زر 'إنشاء حملة' في صفحة التسويق.",
        "يمكنك إرسال رسائل بريد إلكتروني جماعية للمنشآت من خلال صفحة 'إرسال بريد إلكتروني'.",
        "يمكنك إرسال رسائل واتساب للمنشآت من خلال صفحة 'إرسال واتساب'.",
        "يمكنك استهداف المنشآت بناءً على معايير محددة مثل المنطقة أو نوع المنشأة."
    ],
    "statistics": [
        "يمكنك عرض إحصائيات المنشآت حسب المنطقة أو المدينة أو نوع المنشأة.",
        "يمكنك عرض إحصائيات الحملات التسويقية ومعدلات النجاح.",
        "يمكنك إنشاء تقارير مخصصة بناءً على معايير محددة.",
        "يمكنك تصدير الإحصائيات والتقارير بتنسيقات مختلفة."
    ],
    "users": [
        "يمكنك إدارة المستخدمين وصلاحياتهم من خلال صفحة 'إدارة المستخدمين'.",
        "يمكنك إنشاء مستخدم جديد وتحديد دوره وصلاحياته.",
        "يمكنك تعديل بيانات المستخدمين وتغيير كلمات المرور.",
        "يمكنك تعطيل حسابات المستخدمين أو تفعيلها."
    ],
    "integration": [
        "يمكنك ربط النظام مع تطبيقات الأتمتة مثل n8n وZapier وMake.",
        "يمكنك إنشاء webhooks لتلقي إشعارات عند حدوث تغييرات في النظام.",
        "يمكنك استخدام واجهات برمجة التطبيقات (API) للتكامل مع أنظمة أخرى.",
        "يمكنك الاطلاع على توثيق API من خلال صفحة 'توثيق API'."
    ]
}

# الأسئلة الشائعة
FAQ = [
    {
        "question": "كيف يمكنني إضافة منشأة جديدة؟",
        "answer": "يمكنك إضافة منشأة جديدة من خلال الضغط على زر 'إضافة منشأة' في صفحة المنشآت، ثم ملء النموذج بالبيانات المطلوبة مثل اسم المنشأة والرقم الموحد والمنطقة والمدينة ونوع المنشأة وبيانات الاتصال."
    },
    {
        "question": "كيف يمكنني إنشاء حملة تسويقية؟",
        "answer": "يمكنك إنشاء حملة تسويقية جديدة من خلال الضغط على زر 'إنشاء حملة' في صفحة التسويق، ثم تحديد نوع الحملة (بريد إلكتروني، واتساب، وسائل التواصل الاجتماعي) وإدخال تفاصيل الحملة والجمهور المستهدف."
    },
    {
        "question": "كيف يمكنني عرض إحصائيات المنشآت؟",
        "answer": "يمكنك عرض إحصائيات المنشآت من خلال الذهاب إلى صفحة 'الإحصائيات' ثم اختيار 'إحصائيات المنشآت'. ستظهر لك رسوم بيانية ومؤشرات توضح توزيع المنشآت حسب المنطقة والمدينة ونوع المنشأة."
    },
    {
        "question": "كيف يمكنني تصدير بيانات المنشآت؟",
        "answer": "يمكنك تصدير بيانات المنشآت من خلال الضغط على زر 'تصدير' في صفحة المنشآت، ثم اختيار تنسيق التصدير (Excel، CSV، JSON) والمعايير المطلوبة للتصدير."
    },
    {
        "question": "كيف يمكنني إدارة المستخدمين والصلاحيات؟",
        "answer": "يمكنك إدارة المستخدمين والصلاحيات من خلال الذهاب إلى صفحة 'إدارة المستخدمين' في لوحة تحكم المسؤول. يمكنك إنشاء مستخدمين جدد وتحديد أدوارهم وصلاحياتهم وتعديل بياناتهم."
    },
    {
        "question": "كيف يمكنني ربط النظام مع تطبيقات الأتمتة؟",
        "answer": "يمكنك ربط النظام مع تطبيقات الأتمتة مثل n8n وZapier وMake من خلال استخدام واجهات برمجة التطبيقات (API) المتاحة. يمكنك الاطلاع على توثيق API من صفحة 'توثيق API' واستخدام مفاتيح API لإنشاء الاتصال."
    },
    {
        "question": "كيف يمكنني إرسال رسائل بريد إلكتروني جماعية؟",
        "answer": "يمكنك إرسال رسائل بريد إلكتروني جماعية من خلال الذهاب إلى صفحة 'التسويق' ثم اختيار 'إرسال بريد إلكتروني'. يمكنك تحديد المستلمين بناءً على معايير مختلفة وإنشاء محتوى الرسالة وجدولة الإرسال."
    },
    {
        "question": "كيف يمكنني البحث عن منشأة معينة؟",
        "answer": "يمكنك البحث عن منشأة معينة من خلال استخدام شريط البحث في صفحة المنشآت. يمكنك البحث باستخدام اسم المنشأة أو الرقم الموحد أو رقم الجوال أو البريد الإلكتروني."
    },
    {
        "question": "كيف يمكنني تغيير كلمة المرور الخاصة بي؟",
        "answer": "يمكنك تغيير كلمة المرور الخاصة بك من خلال الضغط على اسم المستخدم في الزاوية العلوية اليمنى، ثم اختيار 'الإعدادات'. في صفحة الإعدادات، اختر 'تغيير كلمة المرور' وأدخل كلمة المرور الحالية وكلمة المرور الجديدة."
    },
    {
        "question": "كيف يمكنني إنشاء تقرير مخصص؟",
        "answer": "يمكنك إنشاء تقرير مخصص من خلال الذهاب إلى صفحة 'الإحصائيات' ثم اختيار 'تقارير مخصصة'. حدد نوع التقرير والمعايير المطلوبة والفترة الزمنية، ثم اضغط على 'إنشاء التقرير'."
    }
]

# واجهة برمجية للحصول على مساعدة
@ai_assistant_bp.route('/help', methods=['POST'])
@jwt_required()
def get_help():
    """الحصول على مساعدة من المساعد الذكي"""
    current_user_id = get_jwt_identity()
    data = request.get_json()
    
    if not data or 'query' not in data:
        return jsonify({'message': 'يجب توفير استعلام المساعدة'}), 400
    
    query = data['query']
    context = data.get('context', 'general')
    
    # البحث في الأسئلة الشائعة
    faq_answer = search_faq(query)
    if faq_answer:
        # تسجيل النشاط
        log_activity(current_user_id, query, faq_answer)
        return jsonify({
            'answer': faq_answer,
            'source': 'faq'
        }), 200
    
    # البحث في قاعدة المعرفة
    knowledge_answer = search_knowledge(query, context)
    if knowledge_answer:
        # تسجيل النشاط
        log_activity(current_user_id, query, knowledge_answer)
        return jsonify({
            'answer': knowledge_answer,
            'source': 'knowledge'
        }), 200
    
    # استخدام نموذج الذكاء الاصطناعي للإجابة
    ai_answer = get_ai_response(query, context)
    
    # تسجيل النشاط
    log_activity(current_user_id, query, ai_answer)
    
    return jsonify({
        'answer': ai_answer,
        'source': 'ai'
    }), 200

# واجهة برمجية للحصول على اقتراحات
@ai_assistant_bp.route('/suggestions', methods=['GET'])
@jwt_required()
def get_suggestions():
    """الحصول على اقتراحات من المساعد الذكي"""
    current_user_id = get_jwt_identity()
    context = request.args.get('context', 'general')
    
    # الحصول على المستخدم الحالي
    user = User.query.get(current_user_id)
    
    # الحصول على اقتراحات بناءً على سياق المستخدم
    suggestions = generate_suggestions(user, context)
    
    return jsonify({
        'suggestions': suggestions
    }), 200

# واجهة برمجية للحصول على إرشادات خطوة بخطوة
@ai_assistant_bp.route('/guide', methods=['POST'])
@jwt_required()
def get_guide():
    """الحصول على إرشادات خطوة بخطوة من المساعد الذكي"""
    current_user_id = get_jwt_identity()
    data = request.get_json()
    
    if not data or 'task' not in data:
        return jsonify({'message': 'يجب توفير المهمة المطلوبة'}), 400
    
    task = data['task']
    
    # الحصول على إرشادات خطوة بخطوة
    guide = generate_step_by_step_guide(task)
    
    # تسجيل النشاط
    activity = ActivityLog(
        user_id=current_user_id,
        action='طلب إرشادات',
        entity_type='guide',
        details=f'طلب إرشادات حول: {task}',
        ip_address=request.remote_addr
    )
    db.session.add(activity)
    db.session.commit()
    
    return jsonify({
        'guide': guide
    }), 200

# واجهة برمجية للحصول على شرح للميزات
@ai_assistant_bp.route('/features', methods=['GET'])
@jwt_required()
def get_features():
    """الحصول على شرح لميزات النظام"""
    feature = request.args.get('feature', 'all')
    
    # الحصول على شرح للميزات
    features_explanation = explain_features(feature)
    
    return jsonify({
        'features': features_explanation
    }), 200

# دوال مساعدة
def search_faq(query):
    """البحث في الأسئلة الشائعة"""
    best_match = None
    best_score = 0
    
    for item in FAQ:
        question = item['question']
        score = calculate_similarity(query, question)
        
        if score > best_score and score > 0.7:  # عتبة التشابه
            best_score = score
            best_match = item['answer']
    
    return best_match

def search_knowledge(query, context):
    """البحث في قاعدة المعرفة"""
    if context in ASSISTANT_KNOWLEDGE:
        knowledge_items = ASSISTANT_KNOWLEDGE[context]
        
        best_match = None
        best_score = 0
        
        for item in knowledge_items:
            score = calculate_similarity(query, item)
            
            if score > best_score and score > 0.6:  # عتبة التشابه
                best_score = score
                best_match = item
        
        return best_match
    
    return None

def calculate_similarity(text1, text2):
    """حساب التشابه بين نصين"""
    # تنظيف النصوص
    text1 = re.sub(r'[^\w\s]', '', text1.lower())
    text2 = re.sub(r'[^\w\s]', '', text2.lower())
    
    # تقسيم النصوص إلى كلمات
    words1 = set(text1.split())
    words2 = set(text2.split())
    
    # حساب التشابه (معامل جاكارد)
    intersection = len(words1.intersection(words2))
    union = len(words1.union(words2))
    
    if union == 0:
        return 0
    
    return intersection / union

def get_ai_response(query, context):
    """الحصول على إجابة من نموذج الذكاء الاصطناعي"""
    try:
        # إعداد السياق
        context_info = ""
        if context in ASSISTANT_KNOWLEDGE:
            context_info = "\n".join(ASSISTANT_KNOWLEDGE[context])
        
        # إعداد الرسالة
        messages = [
            {"role": "system", "content": f"أنت مساعد ذكي لنظام إدارة علاقات العملاء (CRM) للمنشآت العقارية. يجب أن تقدم إجابات مفيدة ودقيقة ومختصرة باللغة العربية. معلومات السياق: {context_info}"},
            {"role": "user", "content": query}
        ]
        
        # إرسال الطلب إلى OpenAI API
        headers = {
            "Authorization": f"Bearer {OPENAI_API_KEY}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": "gpt-3.5-turbo",
            "messages": messages,
            "max_tokens": 500,
            "temperature": 0.7
        }
        
        response = requests.post(OPENAI_API_URL, headers=headers, json=data)
        
        if response.status_code == 200:
            result = response.json()
            return result['choices'][0]['message']['content']
        else:
            # في حالة فشل الاتصال بـ API، استخدم إجابة بديلة
            return "عذرًا، لم أتمكن من فهم سؤالك. يمكنك إعادة صياغة السؤال أو الاتصال بفريق الدعم للحصول على المساعدة."
    
    except Exception as e:
        # في حالة حدوث خطأ، استخدم إجابة بديلة
        return "عذرًا، حدث خطأ أثناء معالجة طلبك. يرجى المحاولة مرة أخرى لاحقًا أو الاتصال بفريق الدعم."

def generate_suggestions(user, context):
    """توليد اقتراحات بناءً على سياق المستخدم"""
    suggestions = []
    
    if context == 'dashboard':
        suggestions = [
            "يمكنك عرض إحصائيات المنشآت حسب المنطقة",
            "يمكنك إنشاء حملة تسويقية جديدة",
            "يمكنك تصدير بيانات المنشآت"
        ]
    elif context == 'establishments':
        suggestions = [
            "يمكنك إضافة منشأة جديدة",
            "يمكنك البحث عن منشآت في منطقة محددة",
            "يمكنك تصدير بيانات المنشآت"
        ]
    elif context == 'marketing':
        suggestions = [
            "يمكنك إنشاء حملة تسويقية جديدة",
            "يمكنك إرسال رسائل بريد إلكتروني للمنشآت",
            "يمكنك استهداف المنشآت حسب المنطقة"
        ]
    elif context == 'statistics':
        suggestions = [
            "يمكنك عرض إحصائيات المنشآت حسب المنطقة",
            "يمكنك عرض إحصائيات الحملات التسويقية",
            "يمكنك إنشاء تقرير مخصص"
        ]
    else:
        suggestions = [
            "يمكنك إضافة منشأة جديدة",
            "يمكنك إنشاء حملة تسويقية",
            "يمكنك عرض الإحصائيات",
            "يمكنك إدارة المستخدمين"
        ]
    
    return suggestions

def generate_step_by_step_guide(task):
    """توليد إرشادات خطوة بخطوة"""
    guides = {
        "إضافة منشأة": [
            "انتقل إلى صفحة 'المنشآت' من القائمة الجانبية",
            "اضغط على زر 'إضافة منشأة' في الزاوية العلوية اليمنى",
            "أدخل اسم المنشأة والرقم الموحد (إن وجد)",
            "أدخل بيانات الاتصال مثل رقم الجوال والبريد الإلكتروني",
            "اختر المنطقة والمدينة والحي",
            "اختر نوع المنشأة",
            "أدخل بيانات الرخص (إن وجدت)",
            "اضغط على زر 'حفظ' لإضافة المنشأة"
        ],
        "إنشاء حملة تسويقية": [
            "انتقل إلى صفحة 'التسويق' من القائمة الجانبية",
            "اضغط على زر 'إنشاء حملة' في الزاوية العلوية اليمنى",
            "أدخل اسم الحملة ووصفها",
            "اختر نوع الحملة (بريد إلكتروني، واتساب، وسائل التواصل الاجتماعي)",
            "حدد تاريخ بدء وانتهاء الحملة",
            "اضغط على زر 'التالي' للانتقال إلى صفحة استهداف الجمهور",
            "حدد معايير الاستهداف مثل المنطقة ونوع المنشأة",
            "اضغط على زر 'التالي' للانتقال إلى صفحة إنشاء المحتوى",
            "أدخل عنوان ومحتوى الرسالة",
            "اضغط على زر 'معاينة' لمعاينة الرسالة",
            "اضغط على زر 'إرسال' لإرسال الحملة أو 'جدولة' لجدولة الإرسال"
        ],
        "تصدير بيانات": [
            "انتقل إلى الصفحة التي تحتوي على البيانات المراد تصديرها",
            "اضغط على زر 'تصدير' في الزاوية العلوية اليمنى",
            "اختر تنسيق التصدير (Excel، CSV، JSON)",
            "حدد المعايير المطلوبة للتصدير (إن وجدت)",
            "اضغط على زر 'تصدير' لبدء عملية التصدير",
            "انتظر حتى اكتمال عملية التصدير",
            "اضغط على رابط التنزيل لتنزيل الملف"
        ],
        "إنشاء مستخدم جديد": [
            "انتقل إلى صفحة 'إدارة المستخدمين' من القائمة الجانبية",
            "اضغط على زر 'إضافة مستخدم' في الزاوية العلوية اليمنى",
            "أدخل اسم المستخدم والبريد الإلكتروني والاسم الكامل",
            "أدخل كلمة المرور وتأكيد كلمة المرور",
            "اختر دور المستخدم (مسؤول، مدير، مستخدم)",
            "حدد الصلاحيات المطلوبة للمستخدم",
            "اضغط على زر 'حفظ' لإنشاء المستخدم"
        ],
        "إنشاء تقرير مخصص": [
            "انتقل إلى صفحة 'الإحصائيات' من القائمة الجانبية",
            "اضغط على زر 'تقارير مخصصة' في الزاوية العلوية اليمنى",
            "اختر نوع التقرير (منشآت، تسويق، مستخدمين)",
            "حدد المعايير المطلوبة للتقرير",
            "حدد الفترة الزمنية للتقرير",
            "اضغط على زر 'إنشاء التقرير' لإنشاء التقرير",
            "يمكنك تصدير التقرير بالضغط على زر 'تصدير'"
        ]
    }
    
    # البحث عن الدليل المناسب
    for key in guides:
        if key in task:
            return guides[key]
    
    # إذا لم يتم العثور على دليل مناسب
    return [
        "عذرًا، لم أتمكن من العثور على إرشادات محددة لهذه المهمة.",
        "يمكنك الاتصال بفريق الدعم للحصول على المساعدة."
    ]

def explain_features(feature):
    """شرح ميزات النظام"""
    features = {
        "dashboard": {
            "title": "لوحة التحكم",
            "description": "توفر لوحة التحكم نظرة عامة على النظام وتعرض الإحصائيات الرئيسية والمؤشرات والتنبيهات.",
            "capabilities": [
                "عرض إحصائيات المنشآت حسب المنطقة والمدينة ونوع المنشأة",
                "عرض إحصائيات الحملات التسويقية",
                "عرض آخر النشاطات في النظام",
                "الوصول السريع إلى الوظائف الرئيسية"
            ]
        },
        "establishments": {
            "title": "إدارة المنشآت",
            "description": "تتيح هذه الميزة إدارة المنشآت العقارية وبياناتها ورخصها.",
            "capabilities": [
                "إضافة وتعديل وحذف المنشآت",
                "البحث عن المنشآت باستخدام معايير مختلفة",
                "تصدير بيانات المنشآت بتنسيقات مختلفة",
                "عرض تفاصيل المنشآت ورخصها"
            ]
        },
        "marketing": {
            "title": "نظام التسويق",
            "description": "يتيح نظام التسويق إنشاء وإدارة الحملات التسويقية والتواصل مع العملاء عبر قنوات مختلفة.",
            "capabilities": [
                "إنشاء وإدارة الحملات التسويقية",
                "إرسال رسائل بريد إلكتروني جماعية",
                "إرسال رسائل واتساب",
                "نشر محتوى على وسائل التواصل الاجتماعي",
                "استهداف العملاء بناءً على معايير محددة",
                "تحليل أداء الحملات التسويقية"
            ]
        },
        "statistics": {
            "title": "الإحصائيات والتقارير",
            "description": "توفر هذه الميزة إحصائيات وتقارير متنوعة حول المنشآت والحملات التسويقية والمستخدمين.",
            "capabilities": [
                "عرض إحصائيات المنشآت حسب المنطقة والمدينة ونوع المنشأة",
                "عرض إحصائيات الحملات التسويقية ومعدلات النجاح",
                "إنشاء تقارير مخصصة بناءً على معايير محددة",
                "تصدير الإحصائيات والتقارير بتنسيقات مختلفة",
                "عرض الرسوم البيانية والمخططات التوضيحية"
            ]
        },
        "users": {
            "title": "إدارة المستخدمين",
            "description": "تتيح هذه الميزة إدارة المستخدمين وصلاحياتهم وأدوارهم في النظام.",
            "capabilities": [
                "إنشاء وتعديل وحذف المستخدمين",
                "تحديد أدوار المستخدمين وصلاحياتهم",
                "تعطيل وتفعيل حسابات المستخدمين",
                "تغيير كلمات المرور",
                "عرض سجل نشاطات المستخدمين"
            ]
        },
        "integration": {
            "title": "التكامل مع الأنظمة الأخرى",
            "description": "تتيح هذه الميزة ربط النظام مع تطبيقات وأنظمة أخرى باستخدام واجهات برمجة التطبيقات (API).",
            "capabilities": [
                "التكامل مع تطبيقات الأتمتة مثل n8n وZapier وMake",
                "إنشاء وإدارة webhooks",
                "استخدام واجهات برمجة التطبيقات (API) للتكامل مع أنظمة أخرى",
                "استيراد وتصدير البيانات"
            ]
        },
        "ai_assistant": {
            "title": "مساعد الذكاء الاصطناعي",
            "description": "يوفر مساعد الذكاء الاصطناعي المساعدة والإرشادات للمستخدمين أثناء استخدام النظام.",
            "capabilities": [
                "الإجابة على الأسئلة الشائعة",
                "تقديم إرشادات خطوة بخطوة لاستخدام النظام",
                "اقتراح إجراءات بناءً على سياق المستخدم",
                "شرح ميزات النظام",
                "المساعدة في حل المشكلات"
            ]
        }
    }
    
    if feature == 'all':
        return features
    elif feature in features:
        return {feature: features[feature]}
    else:
        return {"error": "الميزة غير موجودة"}

def log_activity(user_id, query, answer):
    """تسجيل نشاط المساعد الذكي"""
    activity = ActivityLog(
        user_id=user_id,
        action='استخدام المساعد الذكي',
        entity_type='ai_assistant',
        details=f'سؤال: {query}\nإجابة: {answer}',
        ip_address=request.remote_addr
    )
    db.session.add(activity)
    db.session.commit()
